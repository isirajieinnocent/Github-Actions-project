name: CICD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  Compile:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

  security-check:
    runs-on: self-hosted
    needs: Compile
    steps:
    - uses: actions/checkout@v4
    
    - name: trivy installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install trivy -y
    - name: Trivy FS Scan
      run: trivy fs --format table -o fs-report.json .
      
    - name: gitleaks Installation
      run: sudo apt install gitleaks -y
    - name: Gitleaks Code Scan
      run: gitleaks detect -r git-source . -r gitleaks-report.json -f json
      
  test:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: unit test
      run: mvn test
  
  build-project-and-sonar-scan:
    runs-on: self-hosted
    needs: test
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build project
      run: mvn package

    - name: Upload JAR artifact 
      uses: actions/upload-artifact@v4 
      with: 
        name: app-jar 
        path: target/*.jar
       
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.3.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      with:
        pollingTimeoutSec: 600
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build-docker-image-and-push:
    runs-on: self-hosted
    needs: build-project-and-sonar-scan
    steps:
    - uses: actions/checkout@v4
    - name: Download JAR artifact 
      uses: actions/download-artifact@v4 
      with: 
        name: app-jar 
        path: app # this will download JAR to ./app folder
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: innocenttech/bankapp:latest
        
        
  deploy-to-kubernetes:
    runs-on: self-hosted
    needs: build-docker-image-and-push
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Install AWS CLI
      run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          rm -rf awscliv2.zip aws

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
          version: latest

    - name: Configure kubeconfig
      run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.EKS_KUBECONFIG }}" > $HOME/.kube/config

    - name: Deploy to EKS
      run: |
          kubectl apply -f ds.yml
